# =====================================================================
# File: .github/workflows/qa-portal-anchor.yml
# Purpose : Automatischer + manueller QA-Check des Portal-Projektankers
# Version : v1.1 (2025-08-18)
# Triggers: (1) workflow_run nach erfolgreichem Deploy
#           (2) workflow_dispatch (manuell im UI startbar)
# Owner   : TM/QM, CMO
# =====================================================================

name: QA — Portal Anchor Check

on:
  workflow_run:
    workflows: ["Manual Commit + Deploy"]
    types: [completed]
  workflow_dispatch:
    inputs:
      url:
        description: "Portal-URL (optional; default wird berechnet)"
        required: false
        default: ""

permissions:
  contents: read

jobs:
  qa-portal-anchor:
    runs-on: ubuntu-latest
    # Automatisch nur prüfen, wenn Deploy success; bei manuellem Start immer laufen
    if: >
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
      || github.event_name == 'workflow_dispatch'

    steps:
      - name: Resolve context (deploy or manual)
        id: ctx
        run: |
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            echo "mode=auto" >> $GITHUB_OUTPUT
            echo "branch=${{ github.event.workflow_run.head_branch }}" >> $GITHUB_OUTPUT
            echo "sha7=${{ github.event.workflow_run.head_sha }}" | cut -c1-14 | awk '{print substr($0,1,7)}' >> /tmp/sha7.txt
            echo "sha7=$(cat /tmp/sha7.txt)" >> $GITHUB_OUTPUT
            echo "run=${{ github.event.workflow_run.run_number }}" >> $GITHUB_OUTPUT
          else
            echo "mode=manual" >> $GITHUB_OUTPUT
            # Bei manuellem QA-Start kennen wir den letzten Deploy-Run nicht sicher → Feldgleichheit wird übersprungen
            echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "sha7=${{ github.sha }}" | cut -c1-14 | awk '{print substr($0,1,7)}' >> /tmp/sha7.txt
            echo "sha7=$(cat /tmp/sha7.txt)" >> $GITHUB_OUTPUT
            echo "run=n/a" >> $GITHUB_OUTPUT
          fi

      - name: Compute site URL
        id: site
        run: |
          if [ -n "${{ github.event.inputs.url }}" ]; then
            echo "url=${{ github.event.inputs.url }}" >> $GITHUB_OUTPUT
          else
            echo "url=https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/" >> $GITHUB_OUTPUT
          fi

      - name: Fetch portal HTML (no-cache) & make text view
        run: |
          echo "Fetching: ${{ steps.site.outputs.url }}"
          curl -sSL -H 'Cache-Control: no-cache, no-store, max-age=0' -H 'Pragma: no-cache' "${{ steps.site.outputs.url }}" -o portal.html
          test -s portal.html || { echo "Leere Seite geladen"; exit 1; }
          sed -E 's/<[^>]+>//g' portal.html > portal.txt
          echo "--- Lines with 'Projektanker' ---"
          grep -n "Projektanker" portal.txt || true

      - name: Validate anchor (regex + optional field equality)
        id: validate
        run: |
          python3 - << 'PY'
import re, sys, pathlib, os
txt = pathlib.Path("portal.txt").read_text(encoding="utf-8", errors="ignore")
lines = [ln.strip() for ln in txt.splitlines() if "Projektanker" in ln]
if len(lines) != 1:
    print(f"FAIL: Erwartet 1 'Projektanker'-Zeile, gefunden {len(lines)}")
    for l in lines: print(">>", l)
    sys.exit(2)
line = lines[0]
print("Anchor:", line)

# Regex: PRJ-.... · Build YYYY-MM-DD HH:MMZ / YYYY-MM-DD HH:MM Europe/Berlin · <branch> · #<sha7> · Run <n>
rx = re.compile(
    r"Projektanker:\s*PRJ-\d{4}-\d{2}-[A-Z0-9-]+"
    r"\s*·\s*Build\s+\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}Z"
    r"\s*/\s*\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}\s+Europe/Berlin"
    r"\s*·\s*(?P<branch>[a-z0-9/_-]+)"
    r"\s*·\s*#(?P<sha7>[0-9a-f]{7})"
    r"\s*·\s*Run\s+(?P<run>\d+)",
    re.IGNORECASE
)
m = rx.search(line)
if not m:
    print("FAIL: Regex-Match auf Ankerzeile fehlgeschlagen.")
    sys.exit(3)

mode = os.getenv("MODE", "").lower()
branch = m.group("branch")
sha7   = m.group("sha7").lower()
run    = m.group("run")

exp_branch = os.getenv("EXP_BRANCH","").lower()
exp_sha7   = os.getenv("EXP_SHA7","").lower()
exp_run    = os.getenv("EXP_RUN","").lower()

print(f"Parsed: branch={branch}, sha7={sha7}, run={run}")
if mode == "auto":
    errors = []
    if branch != exp_branch: errors.append(f"Branch mismatch: {branch} != {exp_branch}")
    if sha7 != exp_sha7:     errors.append(f"SHA mismatch: {sha7} != {exp_sha7}")
    if run != exp_run:       errors.append(f"Run mismatch: {run} != {exp_run}")
    if errors:
        print("FAIL: Feldgleichheit:", *errors, sep="\n- ")
        sys.exit(4)
print("PASS")
PY
        env:
          MODE: ${{ steps.ctx.outputs.mode }}
          EXP_BRANCH: ${{ steps.ctx.outputs.branch }}
          EXP_SHA7: ${{ steps.ctx.outputs.sha7 }}
          EXP_RUN: ${{ steps.ctx.outputs.run }}

      - name: Upload QA artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: qa-portal-anchor-assets
          path: |
            portal.html
            portal.txt

      - name: Summary
        if: always()
        run: |
          echo "## QA — Portal Anchor" >> "$GITHUB_STEP_SUMMARY"
          echo "- Mode: ${{ steps.ctx.outputs.mode }}" >> "$GITHUB_STEP_SUMMARY"
          echo "- URL : ${{ steps.site.outputs.url }}" >> "$GITHUB_STEP_SUMMARY"
          echo "- Expect (auto only): branch=${{ steps.ctx.outputs.branch }}, sha7=${{ steps.ctx.outputs.sha7 }}, run=${{ steps.ctx.outputs.run }}" >> "$GITHUB_STEP_SUMMARY"
