# =====================================================================
# File    : .github/workflows/qa-portal-anchor-check.yml
# Name    : QA - Portal Anchor Check
# Purpose : Automatischer + manueller QA-Check des Projektankers
# Version : v1.6-safe (2025-08-18)
# Notes   : Manuell startbar + auf push; robustes Fetch, Regex-Validierung
# Owner   : TM/QM, CMO
# =====================================================================

name: QA - Portal Anchor Check

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      url:
        description: "Portal-URL (leer = automatisch)"
        required: false
        default: ""

permissions:
  contents: read

jobs:
  qa-portal-anchor:
    runs-on: ubuntu-latest

    steps:
      - name: Resolve mode
        id: ctx
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "mode=manual" >> "$GITHUB_OUTPUT"
          else
            echo "mode=auto" >> "$GITHUB_OUTPUT"
          fi

      - name: Compute site URL
        id: site
        shell: bash
        run: |
          if [ -n "${{ github.event.inputs.url }}" ]; then
            echo "url=${{ github.event.inputs.url }}" >> "$GITHUB_OUTPUT"
          else
            repo="${GITHUB_REPOSITORY##*/}"
            echo "url=https://${{ github.repository_owner }}.github.io/${repo}/" >> "$GITHUB_OUTPUT"
          fi
          echo "URL=${{ steps.site.outputs.url }}"

      - name: Fetch portal and extract text
        shell: bash
        run: |
          set -e
          URL="${{ steps.site.outputs.url }}"
          for i in 1 2 3; do
            echo "Fetch attempt $i ..."
            curl -sS -m 12 \
              -H 'Cache-Control: no-cache, no-store, max-age=0' \
              -H 'Pragma: no-cache' \
              "${URL}?nocache=$(date +%s)$i" -o portal.html && break
            sleep 2
          done
          test -s portal.html || { echo "Leere Seite geladen"; exit 1; }
          sed -E 's/<[^>]+>//g' portal.html > portal.txt
          echo "--- Lines with 'Projektanker' ---"
          grep -n "Projektanker" portal.txt || true

      - name: Validate anchor with regex
        id: validate
        shell: bash
        run: |
          python3 - <<'PY'
          import re, sys, pathlib
          t = pathlib.Path("portal.txt").read_text(encoding="utf-8", errors="ignore")
          lines = [ln.strip() for ln in t.splitlines() if "Projektanker" in ln]
          if len(lines) != 1:
              print(f"FAIL: Erwartet 1 'Projektanker'-Zeile, gefunden {len(lines)}")
              for l in lines[:5]:
                  print(">>", l)
              sys.exit(2)
          line = lines[0]
          print("Anchor:", line)

          rx = re.compile(
              r"Projektanker:\s*PRJ-\d{4}-\d{2}-[A-Z0-9-]+"
              r"\s*路\s*Build\s+\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}Z"
              r"\s*/\s*\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}\s+Europe/Berlin"
              r"\s*路\s*[a-z0-9/_-]+"
              r"\s*路\s*#[0-9a-f]{7}"
              r"\s*路\s*Run\s+\d+\s*$",
              re.IGNORECASE
          )
          if not rx.search(line):
              print("FAIL: Regex-Match fehlgeschlagen.")
              print("LINE:", line)
              sys.exit(3)
          print("PASS")
          PY

      - name: Upload QA artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: qa-portal-anchor-assets
          path: |
            portal.html
            portal.txt

      - name: Summary
        if: always()
        shell: bash
        run: |
          echo "## QA - Portal Anchor" >> "$GITHUB_STEP_SUMMARY"
          echo "- Mode: ${{ steps.ctx.outputs.mode }}" >> "$GITHUB_STEP_SUMMARY"
          echo "- URL : ${{ steps.site.outputs.url }}" >> "$GITHUB_STEP_SUMMARY"
