# =====================================================================
# File    : .github/workflows/qa-portal-anchor-check.yml
# Name    : QA - Portal Anchor Check
# Purpose : Automatischer + manueller QA-Check des Projektankers
# Version : v1.5 (2025-08-18)
# Notes   : Robust, manuell startbar + auto nach Deploy; Retry + Summary
# Owner   : TM/QM, CMO
# =====================================================================

name: QA - Portal Anchor Check

on:
  # Manuell im Menü startbar
  push:
    branches:
      - main
      
  workflow_dispatch:
    inputs:
      url:
        description: "Portal-URL (leer = automatisch)"
        required: false
        default: ""

  # Automatisch nach erfolgreichem Deploy
  workflow_run:
    workflows: ["Manual Commit + Deploy"]
    types: [completed]

permissions:
  contents: read

jobs:
  qa-portal-anchor:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') ||
      (github.event_name == 'workflow_dispatch')

    steps:
      - name: Resolve mode & expected values
        id: ctx
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_run" ]; then
            echo "mode=auto" >> "$GITHUB_OUTPUT"
            echo "exp_branch=${{ github.event.workflow_run.head_branch }}" >> "$GITHUB_OUTPUT"
            echo "exp_sha7=${{ github.event.workflow_run.head_sha }}" >> "$GITHUB_OUTPUT"
            echo "exp_run=${{ github.event.workflow_run.run_number }}" >> "$GITHUB_OUTPUT"
          else
            echo "mode=manual" >> "$GITHUB_OUTPUT"
            echo "exp_branch=" >> "$GITHUB_OUTPUT"
            echo "exp_sha7="   >> "$GITHUB_OUTPUT"
            echo "exp_run="    >> "$GITHUB_OUTPUT"
          fi

      - name: Compute site URL
        id: site
        shell: bash
        run: |
          if [ -n "${{ github.event.inputs.url }}" ]; then
            echo "url=${{ github.event.inputs.url }}" >> "$GITHUB_OUTPUT"
          else
            repo="${GITHUB_REPOSITORY##*/}"   # z.B. mtk-portal
            echo "url=https://${{ github.repository_owner }}.github.io/${repo}/" >> "$GITHUB_OUTPUT"
          fi
          echo "URL=${{ steps.site.outputs.url }}"

      - name: Fetch portal (no-cache, retry) & extract text
        shell: bash
        run: |
          set -e
          URL="${{ steps.site.outputs.url }}"
          for i in 1 2 3; do
            echo "Fetch attempt $i ..."
            curl -sS -m 12 \
              -H 'Cache-Control: no-cache, no-store, max-age=0' \
              -H 'Pragma: no-cache' \
              "${URL}?nocache=$(date +%s)$i" -o portal.html && break
            sleep 2
          done
          test -s portal.html || { echo "Leere Seite geladen"; exit 1; }
          # HTML → Text (für Regex)
          sed -E 's/<[^>]+>//g' portal.html > portal.txt
          echo "--- Lines with 'Projektanker' ---"
          grep -n "Projektanker" portal.txt || true

      - name: Validate anchor (regex + optional equality)
        id: validate
        shell: bash
        run: |
          python3 - << 'PY'
import re, sys, pathlib, os
t = pathlib.Path("portal.txt").read_text(encoding="utf-8", errors="ignore")
lines = [ln.strip() for ln in t.splitlines() if "Projektanker" in ln]
if len(lines) != 1:
  print(f"FAIL: Erwartet 1 'Projektanker'-Zeile, gefunden {len(lines)}")
  for l in lines[:5]: print(">>", l)
  sys.exit(2)
line = lines[0]
print("Anchor:", line)

rx = re.compile(
  r"Projektanker:\s*PRJ-\d{4}-\d{2}-[A-Z0-9-]+"
  r"\s*·\s*Build\s+\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}Z"
  r"\s*/\s*\d{4}-\d{2}-\d{2}\s+\d{2}:\d{2}\s+Europe/Berlin"
  r"\s*·\s*(?P<branch>[a-z0-9/_-]+)"
  r"\s*·\s*#(?P<sha7>[0-9a-f]{7})"
  r"\s*·\s*Run\s+(?P<run>\d+)\s*$",
  re.IGNORECASE
)
m = rx.search(line)
if not m:
  print("FAIL: Regex-Match auf Ankerzeile fehlgeschlagen.")
  sys.exit(3)

mode = os.getenv("MODE","").lower()
branch = m.group("branch").lower()
sha7   = m.group("sha7").lower()
run    = m.group("run").lower()

exp_branch = os.getenv("EXP_BRANCH","").lower()
exp_sha7   = os.getenv("EXP_SHA7","").lower()[:7]
exp_run    = os.getenv("EXP_RUN","").lower()

print(f"Parsed: branch={branch}, sha7={sha7}, run={run}")
errs=[]
if mode == "auto":
  if exp_branch and branch != exp_branch: errs.append(f"Branch mismatch: {branch} != {exp_branch}")
  if exp_sha7   and sha7   != exp_sha7:   errs.append(f"SHA mismatch: {sha7} != {exp_sha7}")
  if exp_run    and run    != exp_run:    errs.append(f"Run mismatch: {run} != {exp_run}")
if errs:
  print("FAIL:", *errs, sep="\n- "); sys.exit(4)
print("PASS")
PY
        env:
          MODE:       ${{ steps.ctx.outputs.mode }}
          EXP_BRANCH: ${{ steps.ctx.outputs.exp_branch }}
          EXP_SHA7:   ${{ steps.ctx.outputs.exp_sha7 }}
          EXP_RUN:    ${{ steps.ctx.outputs.exp_run }}

      - name: Upload QA artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: qa-portal-anchor-assets
          path: |
            portal.html
            portal.txt

      - name: Summary
        if: always()
        shell: bash
        run: |
          echo "## QA - Portal Anchor" >> "$GITHUB_STEP_SUMMARY"
          echo "- Mode: ${{ steps.ctx.outputs.mode }}" >> "$GITHUB_STEP_SUMMARY"
          echo "- URL : ${{ steps.site.outputs.url }}" >> "$GITHUB_STEP_SUMMARY"
