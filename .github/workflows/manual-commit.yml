# =====================================================================
# File : .github/workflows/manual-commit.yml
# Name : Manual Commit + Deploy
# ---------------------------------------------------------------------
# Change History
# - v1.0  (2025-08-18)  Initial workflow
# - v1.1  (2025-08-18)  Build-Timestamp (UTC) stempeln + einfache Verifikation
# - v1.2  (2025-08-18)  Build-Info erweitert (Branch, Commit, Run)
# - v1.3  (2025-08-18)  Zeitstempel: UTC + Europe/Berlin; strenge Verifikation
# - v1.4  (2025-08-18)  Regex robuster; Verifikation angepasst
# - v1.4.1(2025-08-18)  Debug vor/nach Stempel; tokenbasierte Verifikation
# - v1.5  (2025-08-18)  Perl-frei (sed); Verify als eigener Step (continue-on-error)
# - v1.6  (2025-08-18)  Fehlertolerant; ausführliches Logging
# - v1.7  (2025-08-18)  Robuste Datei-Erkennung + Ersetzen ODER Einfügen; stabile Verify
# - v1.8  (2025-08-18)  Vor Deploy ALLE alten Build-Fragmente entfernen und
#                      GENAU EINE neue Anker-Zeile einfügen (UTC/Berlin · branch · #sha · Run)
# =====================================================================

name: Manual Commit + Deploy

on:
  workflow_dispatch:
    inputs:
      note:
        description: "Kurznotiz fürs Protokoll"
        required: false
        default: "Manual deploy"

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  commit-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deploy.outputs.page_url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Optionaler Auto-Commit, falls zuvor Dateien im Repo geändert wurden
      - name: Auto-commit (optional)
        run: |
          git config --global user.name "MTK-AutoCommit"
          git config --global user.email "mtk-bot@example.com"
          git add -A
          git commit -m "Automated commit via workflow" || echo "No changes to commit"
          git push || true

      - name: Configure Pages
        uses: actions/configure-pages@v5

      # Datei-Erkennung für das Portal-Einstiegssnippet
      - name: Locate portal index.html
        id: locate
        run: |
          set -e
          cand1="mtk-portal-upload/index.html"
          cand2="index.html"
          if [ -f "$cand1" ]; then
            echo "file=$cand1" >> $GITHUB_OUTPUT
            echo "Using $cand1"
          elif [ -f "$cand2" ]; then
            echo "file=$cand2" >> $GITHUB_OUTPUT
            echo "Using $cand2"
          else
            echo "Kein index.html gefunden (mtk-portal-upload/ oder Repo-Root)."
            exit 1
          fi

      - name: Show current Build line (before)
        run: |
          f="${{ steps.locate.outputs.file }}"
          echo "--- BEFORE (erste Zeile mit 'Projektanker' oder 'Build '):"
          grep -n "Projektanker\|Build " -m 2 "$f" || echo "n/a"

      # v1.8: Cleanup alter Fragmente + genau eine neue Anker-Zeile einfügen
      - name: Stamp Build Tag (clean + insert once) and Write Version
        id: stamp
        env:
          BRANCH: ${{ github.ref_name }}
          SHA_FULL: ${{ github.sha }}
          RUN_ID: ${{ github.run_id }}
          RUN_NUMBER: ${{ github.run_number }}
          NOTE: ${{ github.event.inputs.note }}
        run: |
          # bewusst ohne 'set -e' → tolerant + gut loggend
          f="${{ steps.locate.outputs.file }}"
          ts_utc="$(date -u '+%Y-%m-%d %H:%M')Z"
          ts_berlin="$(TZ=Europe/Berlin date '+%Y-%m-%d %H:%M')"
          shortsha="${SHA_FULL:0:7}"
          anchor="Build ${ts_utc} / ${ts_berlin} Europe/Berlin · ${BRANCH} · #${shortsha} · Run ${RUN_NUMBER}"

          # 1) ALLE vorhandenen Build-Fragmente im Anker-Absatz entfernen
          sed -E -i 's/·[[:space:]]*Build[^<\r\n]*/ /g' "$f" 2>/dev/null || true
          sed -E -i 's/\bBuild[^<\r\n]*/ /g'           "$f" 2>/dev/null || true
          # doppelte Trennpunkte/Spaces aufräumen
          sed -E -i 's/[[:space:]]+/ /g; s/·[[:space:]]*·/·/g; s/[[:space:]]·[[:space:]]/ · /g' "$f" 2>/dev/null || true

          # 2) Neue Build-Info genau einmal vor </p> in der muted-Zeile einfügen
          awk -v ins=" · ${anchor}" '
            BEGIN{done=0}
            /<p[[:space:]]+class="muted">/ && done==0 {
              sub(/[[:space:]]*<\/p>/, ins"</p>")
              done=1
            }
            {print}
          ' "$f" > "$f.tmp" && mv "$f.tmp" "$f"

          echo "AFTER (erste Zeile mit 'Projektanker' oder 'Build '):"
          grep -n "Projektanker\|Build " -m 2 "$f" || echo "n/a"

          # CM-Versionierung (Artefakt)
          ver="$(date -u '+%Y.%m.%d')-${RUN_NUMBER}"
          mkdir -p mtk-portal-upload 2>/dev/null || true
          printf "%s\n" "${ver}" > mtk-portal-upload/VERSION 2>/dev/null || true
          cat > mtk-portal-upload/version.json <<JSON
          {
            "version": "${ver}",
            "time_utc": "$(date -u '+%Y-%m-%dT%H:%M:00Z')",
            "time_europe_berlin": "${ts_berlin}",
            "branch": "${BRANCH}",
            "commit": "${shortsha}",
            "run_id": "${RUN_ID}",
            "run_number": ${RUN_NUMBER},
            "note": "${NOTE}"
          }
          JSON

          {
            echo "## Deploy Summary"
            echo "- **Stamped:** ${anchor}"
            echo "- **Version:** ${ver}"
            echo "- **Branch:** ${BRANCH}"
            echo "- **Commit:** ${shortsha}"
            echo "- **Run:** ${RUN_NUMBER}"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Upload artifact (mtk-portal-upload)
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./mtk-portal-upload

      - name: Deploy to GitHub Pages
        id: deploy
        uses: actions/deploy-pages@v4
